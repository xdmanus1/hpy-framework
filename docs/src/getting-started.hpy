<html>
<h1>Getting Started</h1>

<p>Setting up and using <code>hpy-tool</code> is straightforward. Follow these steps to install the tool and initialize your first project.</p>

<h2>Installation</h2>

<p>A Python virtual environment is strongly recommended to manage dependencies for your project.</p>

<pre><code># 1. Create and activate a virtual environment (if you haven't)
python -m venv .venv

# Linux/macOS:
source .venv/bin/activate

# Windows (CMD):
# .venv\Scripts\activate.bat

# Windows (PowerShell):
# .venv\Scripts\Activate.ps1

# 2. Install hpy-tool
# Option A: From PyPI (Recommended once published)
# pip install hpy-tool

# Option B: From local source code (for development)
# Navigate to the root directory of the hpy-tool project (where pyproject.toml is)
pip install -e .

# Dependencies: This installs 'watchdog' (required for -w) and 'tomli'
# (required for hpy.toml configuration on Python < 3.11).</code></pre>

<h2>Initialize Your First Project</h2>

<p>The easiest way to start is by using the <code>--init</code> command.</p>

<pre><code># 1. Initialize a new project directory
hpy --init my-first-app

# 2. Navigate into the project directory
cd my-first-app</code></pre>

<p>This command will prompt you to choose a template. Choosing the default (Directory with Layout) creates the following structure:</p>

<pre><code>my-first-app/
├── hpy.toml        # Project configuration file
└── src/            # Default source directory
    ├── _layout.hpy   # Shared layout file
    ├── about.hpy     # Example page
    ├── index.hpy     # Example homepage
    └── static/       # Static asset directory
        └── logo.svg  # Example static file</code></pre>

<p>Key files generated:</p>
<ul>
    <li><code>hpy.toml</code>: Configures your project's input, output, and static directories.</li>
    <li><code>src/_layout.hpy</code>: The main HTML template for all pages.</li>
    <li><code>src/index.hpy</code>, <code>src/about.hpy</code>: Example content pages.</li>
    <li><code>src/static/logo.svg</code>: An example static asset referenced in the layout.</li>
</ul>
<p><em>Important:</em> For static asset handling to work, ensure the <code>static_dir_name</code> line in your <code>hpy.toml</code> is uncommented and correctly set.</p>

<h2>Run the Development Server</h2>

<p>With your project initialized and dependencies installed, start the development server:</p>

<pre><code># Make sure you are inside your project directory ('my-first-app')
hpy -w</code></pre>

<p>Explanation:</p>
<ul>
    <li><code>hpy</code>: Executes the tool.</li>
    <li><code>-w</code> (watch mode): This flag tells <code>hpy-tool</code> to:
        <ul>
            <li>Perform an initial build (compiling <code>.hpy</code> files and copying static assets) based on <code>hpy.toml</code> settings (defaulting to <code>src</code> -> <code>dist</code>).</li>
            <li>Start a development web server (defaulting to port 8000) serving the output directory (<code>dist</code>).</li>
            <li>Watch the source directory (<code>src</code>) for changes.</li>
            <li>Automatically rebuild relevant <code>.hpy</code> files or sync changed static assets when you save changes.</li>
        </ul>
    </li>
</ul>

<p>Open your web browser and navigate to <a href="http://localhost:8000">http://localhost:8000</a> (or the port shown in the console). You should see your application running!</p>

<h2>Development Workflow</h2>
<ol>
    <li>Edit files within your source directory (<code>src/</code> by default). Modify <code>.hpy</code> pages, the layout, or add/change files in the static directory.</li>
    <li>Save your changes.</li>
    <li><code>hpy-tool</code> (running with <code>-w</code>) detects the changes and automatically rebuilds or syncs assets.</li>
    <li>Refresh your web browser to see the updated application.</li>
</ol>

<p>You are now ready to start building your web application with HPY!</p>

</html>

<style>
/* Getting Started page specific styles if needed */
</style>

<python>
print("Getting Started page script loaded.")
</python>