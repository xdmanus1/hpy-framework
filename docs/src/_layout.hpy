<!-- docs/src/_layout.hpy -->
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Use Brython - maybe for interactive examples later? -->
    <script src="https://cdn.jsdelivr.net/npm/brython@{{ BRYTHON_VERSION }}/brython.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/brython@{{ BRYTHON_VERSION }}/brython_stdlib.js"></script>
    <!-- Link to docs-specific CSS -->
    <link rel="stylesheet" href="/static/docs.css">
    <!-- Title will be set per page ideally, but fallback -->
    <title>HPY Tool Documentation</title>
    <style>
        /* Minimal layout-specific styles if needed */
        .sidebar nav ul { list-style: none; padding-left: 0; }
        .sidebar nav ul li { margin: 0.5em 0; }
        .sidebar nav ul a.active { font-weight: bold; text-decoration: underline; }

        /* Basic code block styling */
        pre {
            background-color: #f4f4f4;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 1em;
            overflow-x: auto;
            font-family: monospace;
            font-size: 0.9em;
        }
        code {
            font-family: monospace;
            background-color: #eee;
            padding: 0.2em 0.4em;
            border-radius: 3px;
            font-size: 0.9em;
        }
        pre code { background-color: transparent; padding: 0; border-radius: 0; }
    </style>
</head>
<body onload="brython({{'debug': 0}})"> <!-- Disable debug for docs usually -->
    <div class="docs-container">
        <aside class="sidebar">
            <h2>HPY Tool Docs</h2>
            <nav>
                <ul>
                    <li><a href="/index.html" id="nav-index">Introduction</a></li>
                    <li><a href="/getting_started.html" id="nav-getting-started">Getting Started</a></li>
                    <li><a href="/configuration.html" id="nav-configuration">Configuration (hpy.toml)</a></li>
                    <li><a href="/static_assets.html" id="nav-static-assets">Static Assets</a></li>
                    <li><a href="/hpy_files.html" id="nav-hpy-files">.hpy File Structure</a></li>
                    <li><a href="/cli_usage.html" id="nav-cli-usage">CLI Usage</a></li>
                    <!-- Add more links as pages are created -->
                </ul>
            </nav>
        </aside>
        <main class="content">
            <!-- Page content injected here -->
            <!-- HPY_PAGE_CONTENT -->
        </main>
    </div>

    <footer>
        <p>HPY Tool Documentation | BSD 3-Clause Licensed</p>
    </footer>

    <script type="text/python">
    # Simple Python to highlight the active nav link
    from browser import window, document

    current_path = window.location.pathname
    nav_links = document.select('.sidebar nav a')

    for link in nav_links:
        link_href = link.attrs.get('href', '')
        # Basic matching, handles trailing / or .html
        if current_path == link_href or \
           current_path == link_href.replace('.html', '') or \
           current_path == link_href + 'index.html' or \
           current_path.replace('.html', '') == link_href:
            link.classList.add('active')
            # Update page title based on active link text
            document.title = f"{link.text} | HPY Tool Docs"
            break
    else:
         # Fallback for index if no other match
         if current_path == '/' or current_path.endswith('/index.html'):
              index_link = document.select_one('#nav-index')
              if index_link:
                   index_link.classList.add('active')
                   document.title = f"{index_link.text} | HPY Tool Docs"

    print("Docs layout script loaded.")
    </script>
</body>
</html>